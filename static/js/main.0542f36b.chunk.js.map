{"version":3,"sources":["components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/StatisticsItem.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.jsx","App.js","index.js"],"names":["Section","children","this","props","title","Component","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","key","type","name","onClick","StatisticsItem","string","charAt","toUpperCase","slice","text","value","capitalizeFirstLetter","Statistics","entries","entry","Notification","msg","App","state","good","neutral","bad","changeHandler","event","target","setState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","total","positivePercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAoBeA,E,4JAZb,WAAU,IACAC,EAAaC,KAAKC,MAAlBF,SACAG,EAAUF,KAAKC,MAAfC,MACR,OACE,oCACE,6BAAKA,IACJH,S,GAXaI,aC0BPC,E,4JApBb,WAAU,IACAC,EAAYL,KAAKC,MAAjBI,QACDC,EAAmBN,KAAKC,MAAxBK,gBACP,OACE,mCACGC,OAAOC,KAAKH,GAASI,KAAI,SAACC,GAAD,OACxB,wBACEC,KAAK,SACLC,KAAMF,EAENG,QAASP,EAJX,SAMGI,GAHIA,Y,GAfaP,aCoBfW,E,2KAdb,SAAsBC,GACpB,OAAOA,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,MAAM,K,oBAGvD,WAAU,IACFC,EAASnB,KAAKC,MAAdkB,KACEC,EAAUpB,KAAKC,MAAfmB,MAER,OADAD,EAAOnB,KAAKqB,sBAAsBF,GAEhC,+BAAKA,EAAL,KAAaC,S,GAfUjB,aCoBdmB,E,4JAXb,WACE,OACE,6BACGf,OAAOgB,QAAQvB,KAAKC,OAAOQ,KAAI,SAAAe,GAAK,OACnC,cAAC,EAAD,CAAiBL,KAAMK,EAAM,GAAIJ,MAAOI,EAAM,c,GAZ/BrB,aCYVsB,E,4JARb,WAAU,IACAC,EAAQ1B,KAAKC,MAAbyB,IACR,OACE,4BAAIA,Q,GARiBvB,aCmDZwB,E,4MA/CXC,MAAQ,CACRC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPC,cAAgB,SAACC,GACf,IAAMrB,EAAOqB,EAAMC,OAAOtB,KAC1B,EAAKuB,UAAS,SAACP,GAAD,sBACXhB,EAAOgB,EAAMhB,GAAQ,O,EAI1BwB,mBAAqB,WAAO,IAAD,EACM,EAAKR,MACpC,OAFyB,EACjBC,KADiB,EACXC,QADW,EACFC,K,EAIzBM,gCAAkC,WAChC,OAAK,EAAKT,MAAMC,KAITS,KAAKC,MAAyB,IAAlB,EAAKX,MAAMC,KAAc,EAAKO,sBAHxC,G,4CAMX,WAAU,IAAD,EACwBpC,KAAK4B,MAA5BC,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,qCACE,cAAC,EAAD,CAAS7B,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBG,QAASL,KAAK4B,MAAOtB,gBAAiBN,KAAKgC,kBAG9D,cAAC,EAAD,CAAS9B,MAAM,aAAf,SACGF,KAAKoC,qBAEJ,cAAC,EAAD,CAAYP,KAAMA,EAAMC,QAASA,EAASC,IAAKA,EAAKS,MAAOxC,KAAKoC,qBAAsBK,mBAAoBzC,KAAKqC,oCAE/G,cAAC,EAAD,CAAcX,IAAI,+B,GAxCZvB,aCFlBuC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.0542f36b.chunk.js","sourcesContent":["import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Section extends Component {\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n    title: PropTypes.string.isRequired,\n  }\n  render() {\n    const { children } = this.props;\n    const { title } = this.props;\n    return (\n      <section>\n        <h2>{title}</h2>\n        {children}\n      </section>\n    )\n  }\n}\n\nexport default Section;","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass FeedbackOptions extends Component {\n  static propTypes = {\n    options: PropTypes.object.isRequired,\n    onLeaveFeedback: PropTypes.func.isRequired,\n  }\n\n  render() {\n    const { options } = this.props;\n    const {onLeaveFeedback} = this.props;\n    return (\n      <>\n        {Object.keys(options).map((key) => (\n          <button\n            type=\"button\"\n            name={key}\n            key={key}\n            onClick={onLeaveFeedback}\n          >\n            {key}\n          </button>\n        ))}\n      </>\n    )\n  }\n}\n\nexport default FeedbackOptions;","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass StatisticsItem extends Component {\n  static propTypes = {\n    text: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired,\n  }\n\n  capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  render() {\n    let { text } = this.props;\n    const { value } = this.props;\n    text = this.capitalizeFirstLetter(text);\n    return (\n      <li>{text}: {value}</li>\n    )\n  }\n}\n\nexport default StatisticsItem;","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport StatisticsItems from './StatisticsItem';\n\nclass Statistics extends Component {\n  static propTypes = {\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    positivePercentage: PropTypes.number.isRequired,\n  }\n  render() {\n    return (\n      <ul>\n        {Object.entries(this.props).map(entry =>\n          <StatisticsItems text={entry[0]} value={entry[1]}/>\n        )}\n      </ul>\n    )\n  }\n}\n\nexport default Statistics;","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Notification extends Component {\n  static propTypes = {\n    msg: PropTypes.string.isRequired,\n  }\n\n  render() {\n    const { msg } = this.props;\n    return (\n      <p>{msg}</p>\n    )\n  }\n}\n\nexport default Notification;","import { Component } from 'react';\nimport Section from './components/Section/Section';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Statistics from './components/Statistics/Statistics';\nimport Notification from './components/Notification/Notification';\n\nclass App extends Component {\n    state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  changeHandler = (event) => {\n    const name = event.target.name;\n    this.setState((state) => ({\n      [name]: state[name] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    if (!this.state.good) {\n      return 0;\n    }\n\n    return Math.round((this.state.good * 100) / this.countTotalFeedback());\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions options={this.state} onLeaveFeedback={this.changeHandler} />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() ?\n\n            <Statistics good={good} neutral={neutral} bad={bad} total={this.countTotalFeedback()} positivePercentage={this.countPositiveFeedbackPercentage()} /> :\n\n            <Notification msg=\"No feedback given\"></Notification>\n          }\n        </Section>\n      </>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}