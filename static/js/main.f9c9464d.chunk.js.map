{"version":3,"sources":["components/Section/Section.module.css","components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","StatisticsItem/StatisticsItem.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.jsx","App.js","index.js"],"names":["module","exports","Section","this","props","children","title","className","styles","section","Component","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","key","type","name","onClick","shortid","generate","StatisticsItem","string","charAt","toUpperCase","slice","text","value","capitalizeFirstLetter","Statistics","entries","entry","Notification","msg","App","state","good","neutral","bad","changeHandler","event","target","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","total","positivePercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,QAAU,2B,uICoBbC,E,4JAXb,WAAU,IAAD,EACqBC,KAAKC,MAAzBC,EADD,EACCA,SAAUC,EADX,EACWA,MAClB,OACE,0BAASC,UAAWC,IAAOC,QAA3B,UACE,6BAAKH,IACJD,S,GAXaK,a,gBCyBPC,E,4JAnBb,WAAU,IAAD,EAC8BR,KAAKC,MAAlCQ,EADD,EACCA,QAASC,EADV,EACUA,gBACjB,OACE,mCACGC,OAAOC,KAAKH,GAASI,KAAI,SAACC,GAAD,OACxB,wBACEC,KAAK,SACLC,KAAMF,EAENG,QAASP,EAJX,SAMGI,GAHII,IAAQC,qB,GAdKZ,aCoBfa,E,2KAfb,SAAsBC,GACpB,OAAOA,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,MAAM,K,oBAGvD,WAAU,IAAD,EACcxB,KAAKC,MAApBwB,EADC,EACDA,KAAMC,EADL,EACKA,MAEZ,OADAD,EAAOzB,KAAK2B,sBAAsBF,GAEhC,+BACGA,EADH,KACWC,EAAgB,sBAATD,EAA+B,IAAM,U,GAfhClB,aCqBdqB,E,4JAXb,WACE,OACE,6BACGjB,OAAOkB,QAAQ7B,KAAKC,OAAOY,KAAI,SAAAiB,GAAK,OACnC,cAAC,EAAD,CAAyCL,KAAmB,uBAAbK,EAAM,GAA8B,oBAAsBA,EAAM,GAAIJ,MAAOI,EAAM,IAA3GZ,IAAQC,qB,GAZdZ,aCWVwB,E,4JARb,WAAU,IACAC,EAAQhC,KAAKC,MAAb+B,IACR,OACE,4BAAIA,Q,GARiBzB,aCmDZ0B,E,4MA/CXC,MAAQ,CACRC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPC,cAAgB,SAACC,GACf,IAAMvB,EAAOuB,EAAMC,OAAOxB,KAC1B,EAAKyB,UAAS,SAACC,GAAD,sBACX1B,EAAO0B,EAAU1B,GAAQ,O,EAI9B2B,mBAAqB,WAAO,IAAD,EACM,EAAKT,MACpC,OAFyB,EACjBC,KADiB,EACXC,QADW,EACFC,K,EAIzBO,gCAAkC,WAChC,OAAK,EAAKV,MAAMC,KAITU,KAAKC,MAAyB,IAAlB,EAAKZ,MAAMC,KAAc,EAAKQ,sBAHxC,G,4CAMX,WAAU,IAAD,EACwB3C,KAAKkC,MAA5BC,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,qCACE,cAAC,EAAD,CAASlC,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBM,QAAST,KAAKkC,MAAOxB,gBAAiBV,KAAKsC,kBAG9D,cAAC,EAAD,CAASnC,MAAM,aAAf,SACGH,KAAK2C,qBAEJ,cAAC,EAAD,CAAYR,KAAMA,EAAMC,QAASA,EAASC,IAAKA,EAAKU,MAAO/C,KAAK2C,qBAAsBK,mBAAoBhD,KAAK4C,oCAE/G,cAAC,EAAD,CAAcZ,IAAI,+B,GAxCZzB,aCFlB0C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f9c9464d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__Ap5Zy\"};","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Section.module.css';\n\nclass Section extends Component {\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n    title: PropTypes.string.isRequired,\n  }\n\n  render() {\n    const { children, title } = this.props;\n    return (\n      <section className={styles.section}>\n        <h2>{title}</h2>\n        {children}\n      </section>\n    )\n  }\n}\n\nexport default Section;","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\n\nclass FeedbackOptions extends Component {\n  static propTypes = {\n    options: PropTypes.object.isRequired,\n    onLeaveFeedback: PropTypes.func.isRequired,\n  }\n\n  render() {\n    const { options, onLeaveFeedback } = this.props;\n    return (\n      <>\n        {Object.keys(options).map((key) => (\n          <button\n            type=\"button\"\n            name={key}\n            key={shortid.generate()}\n            onClick={onLeaveFeedback}\n          >\n            {key}\n          </button>\n        ))}\n      </>\n    )\n  }\n}\n\nexport default FeedbackOptions;","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass StatisticsItem extends Component {\n  static propTypes = {\n    text: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired,\n  }\n\n  capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  render() {\n    let { text, value} = this.props;\n    text = this.capitalizeFirstLetter(text);\n    return (\n      <li>\n        {text}: {value}{text === 'Positive feedback' ? '%' : ''}\n      </li>\n    )\n  }\n}\n\nexport default StatisticsItem;","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport StatisticsItem from '../../StatisticsItem/StatisticsItem';\n\nclass Statistics extends Component {\n  static propTypes = {\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    positivePercentage: PropTypes.number.isRequired,\n  }\n  render() {\n    return (\n      <ul>\n        {Object.entries(this.props).map(entry =>\n          <StatisticsItem key={shortid.generate()} text={entry[0] === 'positivePercentage' ? 'positive feedback' : entry[0]} value={entry[1]}/>\n        )}\n      </ul>\n    )\n  }\n}\n\nexport default Statistics;","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Notification extends Component {\n  static propTypes = {\n    msg: PropTypes.string.isRequired,\n  }\n\n  render() {\n    const { msg } = this.props;\n    return (\n      <p>{msg}</p>\n    )\n  }\n}\n\nexport default Notification;","import { Component } from 'react';\nimport Section from './components/Section/Section';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Statistics from './components/Statistics/Statistics';\nimport Notification from './components/Notification/Notification';\n\nclass App extends Component {\n    state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  changeHandler = (event) => {\n    const name = event.target.name;\n    this.setState((prevState) => ({\n      [name]: prevState[name] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    if (!this.state.good) {\n      return 0;\n    }\n\n    return Math.round((this.state.good * 100) / this.countTotalFeedback());\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions options={this.state} onLeaveFeedback={this.changeHandler} />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() ?\n\n            <Statistics good={good} neutral={neutral} bad={bad} total={this.countTotalFeedback()} positivePercentage={this.countPositiveFeedbackPercentage()} /> :\n\n            <Notification msg=\"No feedback given\"></Notification>\n          }\n        </Section>\n      </>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}